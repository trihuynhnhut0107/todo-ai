{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"TaskStatus": {
				"enum": [
					"pending",
					"in_progress",
					"completed",
					"cancelled"
				],
				"type": "string"
			},
			"TaskPriority": {
				"enum": [
					"low",
					"medium",
					"high",
					"urgent"
				],
				"type": "string"
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"User": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"role": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"password",
					"role",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Task": {
				"properties": {
					"id": {
						"type": "string"
					},
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaskStatus"
					},
					"priority": {
						"$ref": "#/components/schemas/TaskPriority"
					},
					"dueDate": {
						"type": "string",
						"format": "date-time"
					},
					"completedAt": {
						"type": "string",
						"format": "date-time"
					},
					"recurrenceRule": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"userId": {
						"type": "string"
					},
					"user": {
						"$ref": "#/components/schemas/User"
					},
					"projectId": {
						"type": "string"
					},
					"project": {
						"$ref": "#/components/schemas/Project"
					},
					"assignedToId": {
						"type": "string"
					},
					"assignedTo": {
						"$ref": "#/components/schemas/User"
					},
					"order": {
						"type": "number",
						"format": "double"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"title",
					"status",
					"priority",
					"userId",
					"user",
					"order",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Project": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"isShared": {
						"type": "boolean"
					},
					"isArchived": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"ownerId": {
						"type": "string"
					},
					"owner": {
						"$ref": "#/components/schemas/User"
					},
					"tasks": {
						"items": {
							"$ref": "#/components/schemas/Task"
						},
						"type": "array"
					},
					"members": {
						"items": {
							"$ref": "#/components/schemas/User"
						},
						"type": "array"
					},
					"order": {
						"type": "number",
						"format": "double"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"id",
					"name",
					"color",
					"isShared",
					"isArchived",
					"ownerId",
					"owner",
					"tasks",
					"order",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Task_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Task"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateTaskDto": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaskStatus"
					},
					"priority": {
						"$ref": "#/components/schemas/TaskPriority"
					},
					"dueDate": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"projectId": {
						"type": "string"
					},
					"assignedToId": {
						"type": "string"
					},
					"recurrenceRule": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"required": [
					"title"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse_Task-Array_": {
				"description": "Paginated API Response wrapper\nUsed for endpoints that return lists with pagination",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Task"
						},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"data",
					"pagination",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TaskStatsDto": {
				"properties": {
					"total": {
						"type": "number",
						"format": "double"
					},
					"pending": {
						"type": "number",
						"format": "double"
					},
					"inProgress": {
						"type": "number",
						"format": "double"
					},
					"completed": {
						"type": "number",
						"format": "double"
					},
					"cancelled": {
						"type": "number",
						"format": "double"
					},
					"overdue": {
						"type": "number",
						"format": "double"
					},
					"dueToday": {
						"type": "number",
						"format": "double"
					},
					"dueSoon": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"total",
					"pending",
					"inProgress",
					"completed",
					"cancelled",
					"overdue",
					"dueToday",
					"dueSoon"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_TaskStatsDto_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/TaskStatsDto"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateTaskDto": {
				"properties": {
					"title": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TaskStatus"
					},
					"priority": {
						"$ref": "#/components/schemas/TaskPriority"
					},
					"dueDate": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"nullable": true
					},
					"completedAt": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						],
						"nullable": true
					},
					"projectId": {
						"type": "string",
						"nullable": true
					},
					"assignedToId": {
						"type": "string",
						"nullable": true
					},
					"recurrenceRule": {
						"type": "string",
						"nullable": true
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"order": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_null_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"type": "number",
						"enum": [
							null
						],
						"nullable": true
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Task-Array_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Task"
						},
						"type": "array"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"BulkUpdateTasksDto": {
				"properties": {
					"taskIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"updates": {
						"properties": {
							"tags": {
								"items": {
									"type": "string"
								},
								"type": "array"
							},
							"assignedToId": {
								"type": "string",
								"nullable": true
							},
							"projectId": {
								"type": "string",
								"nullable": true
							},
							"priority": {
								"$ref": "#/components/schemas/TaskPriority"
							},
							"status": {
								"$ref": "#/components/schemas/TaskStatus"
							}
						},
						"type": "object"
					}
				},
				"required": [
					"taskIds",
					"updates"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReorderTasksDto": {
				"properties": {
					"taskOrders": {
						"items": {
							"properties": {
								"order": {
									"type": "number",
									"format": "double"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"order",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"taskOrders"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_Project_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/Project"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateProjectDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"isShared": {
						"type": "boolean"
					},
					"memberIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"PaginatedResponse_Project-Array_": {
				"description": "Paginated API Response wrapper\nUsed for endpoints that return lists with pagination",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/Project"
						},
						"type": "array"
					},
					"pagination": {
						"properties": {
							"totalPages": {
								"type": "number",
								"format": "double"
							},
							"total": {
								"type": "number",
								"format": "double"
							},
							"limit": {
								"type": "number",
								"format": "double"
							},
							"page": {
								"type": "number",
								"format": "double"
							}
						},
						"required": [
							"totalPages",
							"total",
							"limit",
							"page"
						],
						"type": "object"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"data",
					"pagination",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateProjectDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"isShared": {
						"type": "boolean"
					},
					"isArchived": {
						"type": "boolean"
					},
					"order": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AddProjectMembersDto": {
				"properties": {
					"userIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"userIds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ReorderProjectsDto": {
				"properties": {
					"projectOrders": {
						"items": {
							"properties": {
								"order": {
									"type": "number",
									"format": "double"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"order",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"projectOrders"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatResponseDto": {
				"properties": {
					"userName": {
						"type": "string"
					},
					"intent": {
						"type": "string"
					},
					"response": {
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"userName",
					"intent",
					"response",
					"messages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChatResponseDto_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ChatResponseDto"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProcessMessageDto": {
				"properties": {
					"userName": {
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"blocked": {
						"type": "boolean"
					}
				},
				"required": [
					"userName",
					"messages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthResponse": {
				"properties": {
					"user": {
						"properties": {
							"role": {
								"type": "string"
							},
							"email": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"role",
							"email",
							"name",
							"id"
						],
						"type": "object"
					},
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"user",
					"accessToken",
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_AuthResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/AuthResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							false
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoginDto": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__accessToken-string__": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"accessToken": {
								"type": "string"
							}
						},
						"required": [
							"accessToken"
						],
						"type": "object"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefreshTokenDto": {
				"properties": {
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"role": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_UserResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Todo AI API",
		"version": "1.0.0",
		"description": "Auto-generated OpenAPI specification for Todo AI",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "API Support",
			"email": "support@todoai.com"
		}
	},
	"paths": {
		"/api/tasks": {
			"post": {
				"operationId": "CreateTask",
				"responses": {
					"201": {
						"description": "Task created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Task_"
								}
							}
						}
					}
				},
				"description": "Create a new task",
				"summary": "Create a task",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTaskDto"
							},
							"example": {
								"title": "Complete project documentation",
								"description": "Write comprehensive docs",
								"status": "pending",
								"priority": "high",
								"dueDate": "2025-10-25T10:00:00Z",
								"projectId": "123e4567-e89b-12d3-a456-426614174000",
								"tags": [
									"documentation",
									"priority"
								]
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetTasks",
				"responses": {
					"200": {
						"description": "Tasks retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_Task-Array_"
								}
							}
						}
					}
				},
				"description": "Get all tasks with filtering and pagination",
				"summary": "List all tasks",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TaskStatus"
						}
					},
					{
						"in": "query",
						"name": "priority",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TaskPriority"
						}
					},
					{
						"in": "query",
						"name": "projectId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "assignedToId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "dueBefore",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "dueAfter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"title",
								"createdAt",
								"updatedAt",
								"dueDate",
								"priority",
								"order"
							]
						}
					},
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					}
				]
			}
		},
		"/api/tasks/stats": {
			"get": {
				"operationId": "GetTaskStats",
				"responses": {
					"200": {
						"description": "Task statistics retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_TaskStatsDto_"
								}
							}
						}
					}
				},
				"description": "Get task statistics",
				"summary": "Get task statistics",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/tasks/{id}": {
			"get": {
				"operationId": "GetTaskById",
				"responses": {
					"200": {
						"description": "Task retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Task_"
								}
							}
						}
					}
				},
				"description": "Get a single task by ID",
				"summary": "Get task by ID",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateTask",
				"responses": {
					"200": {
						"description": "Task updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Task_"
								}
							}
						}
					}
				},
				"description": "Update a task",
				"summary": "Update task",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateTaskDto"
							},
							"example": {
								"title": "Updated task title",
								"status": "in_progress",
								"priority": "urgent"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTask",
				"responses": {
					"200": {
						"description": "Task deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Delete a task",
				"summary": "Delete task",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Task ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/tasks/bulk": {
			"patch": {
				"operationId": "BulkUpdateTasks",
				"responses": {
					"200": {
						"description": "Tasks updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Task-Array_"
								}
							}
						}
					}
				},
				"description": "Bulk update tasks",
				"summary": "Bulk update multiple tasks",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BulkUpdateTasksDto"
							},
							"example": {
								"taskIds": [
									"task-id-1",
									"task-id-2"
								],
								"updates": {
									"status": "completed",
									"priority": "low"
								}
							}
						}
					}
				}
			}
		},
		"/api/tasks/reorder": {
			"patch": {
				"operationId": "ReorderTasks",
				"responses": {
					"200": {
						"description": "Tasks reordered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Reorder tasks",
				"summary": "Reorder tasks",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReorderTasksDto"
							},
							"example": {
								"taskOrders": [
									{
										"id": "task-id-1",
										"order": 0
									},
									{
										"id": "task-id-2",
										"order": 1
									}
								]
							}
						}
					}
				}
			}
		},
		"/projects/{projectId}/tasks": {
			"get": {
				"operationId": "GetTasksByProject",
				"responses": {
					"200": {
						"description": "Tasks retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_Task-Array_"
								}
							}
						}
					}
				},
				"description": "Get tasks by project",
				"summary": "Get all tasks in a project",
				"tags": [
					"Tasks"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "projectId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TaskStatus"
						}
					},
					{
						"in": "query",
						"name": "priority",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/TaskPriority"
						}
					},
					{
						"in": "query",
						"name": "assignedToId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "dueBefore",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "dueAfter",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "tags",
						"required": false,
						"schema": {
							"type": "array",
							"items": {
								"type": "string"
							}
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"title",
								"createdAt",
								"updatedAt",
								"dueDate",
								"priority",
								"order"
							]
						}
					},
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					}
				]
			}
		},
		"/api/projects": {
			"post": {
				"operationId": "CreateProject",
				"responses": {
					"201": {
						"description": "Project created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Create a new project",
				"summary": "Create a project",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProjectDto"
							},
							"example": {
								"name": "My Project",
								"description": "Project description",
								"color": "#3B82F6",
								"icon": "📁",
								"isShared": false
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetProjects",
				"responses": {
					"200": {
						"description": "Projects retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/PaginatedResponse_Project-Array_"
								}
							}
						}
					}
				},
				"description": "Get all projects with filtering and pagination",
				"summary": "List all projects",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": false,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "search",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "isArchived",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "isShared",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					},
					{
						"in": "query",
						"name": "sortBy",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"name",
								"createdAt",
								"updatedAt",
								"order"
							]
						}
					},
					{
						"in": "query",
						"name": "sortOrder",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"ASC",
								"DESC"
							]
						}
					}
				]
			}
		},
		"/api/projects/{id}": {
			"get": {
				"operationId": "GetProjectById",
				"responses": {
					"200": {
						"description": "Project retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Get a single project by ID",
				"summary": "Get project by ID",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateProject",
				"responses": {
					"200": {
						"description": "Project updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Update a project",
				"summary": "Update project",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateProjectDto"
							},
							"example": {
								"name": "Updated Project Name",
								"description": "Updated description",
								"color": "#10B981"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteProject",
				"responses": {
					"200": {
						"description": "Project deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Delete a project",
				"summary": "Delete project",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/projects/{id}/members": {
			"post": {
				"operationId": "AddMembers",
				"responses": {
					"200": {
						"description": "Members added successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Add members to a project",
				"summary": "Add project members",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddProjectMembersDto"
							},
							"example": {
								"userIds": [
									"123e4567-e89b-12d3-a456-426614174000"
								]
							}
						}
					}
				}
			}
		},
		"/api/projects/{id}/members/{userId}": {
			"delete": {
				"operationId": "RemoveMember",
				"responses": {
					"200": {
						"description": "Member removed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Remove a member from a project",
				"summary": "Remove project member",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "User ID to remove",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/projects/reorder": {
			"patch": {
				"operationId": "ReorderProjects",
				"responses": {
					"200": {
						"description": "Projects reordered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_null_"
								}
							}
						}
					}
				},
				"description": "Reorder projects",
				"summary": "Reorder projects",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ReorderProjectsDto"
							},
							"example": {
								"projectOrders": [
									{
										"id": "project-id-1",
										"order": 0
									},
									{
										"id": "project-id-2",
										"order": 1
									}
								]
							}
						}
					}
				}
			}
		},
		"/api/projects/{id}/archive": {
			"patch": {
				"operationId": "ToggleArchive",
				"responses": {
					"200": {
						"description": "Project archive status updated",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_Project_"
								}
							}
						}
					}
				},
				"description": "Archive or unarchive a project",
				"summary": "Toggle project archive status",
				"tags": [
					"Projects"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Project ID",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"isArchived": {
										"type": "boolean"
									}
								},
								"required": [
									"isArchived"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/api/chat/message": {
			"post": {
				"operationId": "ProcessMessage",
				"responses": {
					"200": {
						"description": "Message processed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChatResponseDto_"
								}
							}
						}
					}
				},
				"description": "Process a chat message through the AI agent",
				"summary": "Process chat message",
				"tags": [
					"Chat"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProcessMessageDto"
							},
							"example": {
								"userName": "John Doe",
								"messages": [
									"Create a task for tomorrow: Review pull requests"
								],
								"blocked": false
							}
						}
					}
				}
			}
		},
		"/api/auth/register": {
			"post": {
				"operationId": "Register",
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_AuthResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "User already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Register a new user account",
				"summary": "Register a new user",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "User registration details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterDto",
								"description": "User registration details"
							}
						}
					}
				}
			}
		},
		"/api/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_AuthResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Login with email and password",
				"summary": "User login",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "User login credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginDto",
								"description": "User login credentials"
							}
						}
					}
				}
			}
		},
		"/api/auth/refresh": {
			"post": {
				"operationId": "RefreshToken",
				"responses": {
					"200": {
						"description": "Token refreshed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse__accessToken-string__"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid refresh token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Refresh access token using refresh token",
				"summary": "Refresh access token",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Refresh token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshTokenDto",
								"description": "Refresh token"
							}
						}
					}
				}
			}
		},
		"/api/auth/me": {
			"get": {
				"operationId": "GetMe",
				"responses": {
					"200": {
						"description": "User retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_UserResponse_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get current authenticated user information",
				"summary": "Get current user",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Authentication",
			"description": "User authentication and authorization endpoints"
		},
		{
			"name": "Tasks",
			"description": "Task management endpoints"
		},
		{
			"name": "Projects",
			"description": "Project management endpoints"
		}
	]
}