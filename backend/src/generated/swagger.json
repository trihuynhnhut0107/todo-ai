{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"WorkspaceResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"timezoneCode": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"isArchived": {
						"type": "boolean"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"ownerId": {
						"type": "string"
					},
					"order": {
						"type": "number",
						"format": "double"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"memberCount": {
						"type": "number",
						"format": "double"
					},
					"eventCount": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"id",
					"name",
					"timezoneCode",
					"color",
					"isArchived",
					"ownerId",
					"order",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_WorkspaceResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/WorkspaceResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ErrorResponse": {
				"properties": {
					"success": {
						"type": "boolean",
						"enum": [
							false
						],
						"nullable": false
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateWorkspaceDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"timezoneCode": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"order": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_WorkspaceResponse-Array_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/WorkspaceResponse"
						},
						"type": "array"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateWorkspaceDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"timezoneCode": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"icon": {
						"type": "string"
					},
					"isArchived": {
						"type": "boolean"
					},
					"order": {
						"type": "number",
						"format": "double"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_void_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AddWorkspaceMemberDto": {
				"properties": {
					"userIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"userIds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RemoveWorkspaceMemberDto": {
				"properties": {
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__id-string--name-string--email-string--role-string_-Array_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"properties": {
								"role": {
									"type": "string"
								},
								"email": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"role",
								"email",
								"name",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"EventResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"start": {
						"type": "string",
						"format": "date-time"
					},
					"end": {
						"type": "string",
						"format": "date-time"
					},
					"status": {
						"type": "string"
					},
					"location": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"isAllDay": {
						"type": "boolean"
					},
					"recurrenceRule": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"workspaceId": {
						"type": "string"
					},
					"createdById": {
						"type": "string"
					},
					"createdAt": {
						"type": "string",
						"format": "date-time"
					},
					"updatedAt": {
						"type": "string",
						"format": "date-time"
					},
					"assignees": {
						"items": {
							"properties": {
								"email": {
									"type": "string"
								},
								"name": {
									"type": "string"
								},
								"id": {
									"type": "string"
								}
							},
							"required": [
								"email",
								"name",
								"id"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"start",
					"end",
					"status",
					"color",
					"isAllDay",
					"workspaceId",
					"createdById",
					"createdAt",
					"updatedAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_EventResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/EventResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CreateEventDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"start": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"end": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"workspaceId": {
						"type": "string"
					},
					"assigneeIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"location": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"isAllDay": {
						"type": "boolean"
					},
					"recurrenceRule": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"name",
					"start",
					"end",
					"workspaceId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_EventResponse-Array_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"items": {
							"$ref": "#/components/schemas/EventResponse"
						},
						"type": "array"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UpdateEventDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"start": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"end": {
						"anyOf": [
							{
								"type": "string",
								"format": "date-time"
							},
							{
								"type": "string"
							}
						]
					},
					"status": {
						"type": "string",
						"enum": [
							"scheduled",
							"in_progress",
							"completed",
							"cancelled"
						]
					},
					"location": {
						"type": "string"
					},
					"color": {
						"type": "string"
					},
					"isAllDay": {
						"type": "boolean"
					},
					"recurrenceRule": {
						"type": "string"
					},
					"tags": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"metadata": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"AssignEventDto": {
				"properties": {
					"userIds": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"userIds"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UnassignEventDto": {
				"properties": {
					"userId": {
						"type": "string"
					}
				},
				"required": [
					"userId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ChatResponseDto": {
				"properties": {
					"userName": {
						"type": "string"
					},
					"intent": {
						"type": "string"
					},
					"response": {
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					}
				},
				"required": [
					"userName",
					"intent",
					"response",
					"messages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_ChatResponseDto_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/ChatResponseDto"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProcessMessageDto": {
				"properties": {
					"userName": {
						"type": "string"
					},
					"messages": {
						"items": {
							"type": "string"
						},
						"type": "array"
					},
					"blocked": {
						"type": "boolean"
					}
				},
				"required": [
					"userName",
					"messages"
				],
				"type": "object",
				"additionalProperties": false
			},
			"AuthResponse": {
				"properties": {
					"user": {
						"properties": {
							"role": {
								"type": "string"
							},
							"email": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"id": {
								"type": "string"
							}
						},
						"required": [
							"role",
							"email",
							"name",
							"id"
						],
						"type": "object"
					},
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"user",
					"accessToken",
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_AuthResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/AuthResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RegisterDto": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LoginDto": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse__accessToken-string__": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"properties": {
							"accessToken": {
								"type": "string"
							}
						},
						"required": [
							"accessToken"
						],
						"type": "object"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefreshTokenDto": {
				"properties": {
					"refreshToken": {
						"type": "string"
					}
				},
				"required": [
					"refreshToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"UserResponse": {
				"properties": {
					"id": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"role": {
						"type": "string"
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"role"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ApiResponse_UserResponse_": {
				"description": "Standard API Response wrapper\nUsed by all TSOA controllers",
				"properties": {
					"success": {
						"type": "boolean"
					},
					"message": {
						"type": "string"
					},
					"data": {
						"$ref": "#/components/schemas/UserResponse"
					},
					"timestamp": {
						"type": "string"
					}
				},
				"required": [
					"success",
					"message",
					"timestamp"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"jwt": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Todo AI API",
		"version": "1.0.0",
		"description": "Auto-generated OpenAPI specification for Todo AI",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "API Support",
			"email": "support@todoai.com"
		}
	},
	"paths": {
		"/api/workspaces": {
			"post": {
				"operationId": "CreateWorkspace",
				"responses": {
					"201": {
						"description": "Workspace created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Create a new workspace",
				"summary": "Create a workspace",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Workspace creation details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateWorkspaceDto",
								"description": "Workspace creation details"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetUserWorkspaces",
				"responses": {
					"200": {
						"description": "Workspaces retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse-Array_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get all workspaces for the authenticated user",
				"summary": "Get user workspaces",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		},
		"/api/workspaces/{workspaceId}": {
			"get": {
				"operationId": "GetWorkspaceById",
				"responses": {
					"200": {
						"description": "Workspace retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get workspace by ID",
				"summary": "Get workspace details",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateWorkspace",
				"responses": {
					"200": {
						"description": "Workspace updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update workspace",
				"summary": "Update workspace",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Workspace update details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateWorkspaceDto",
								"description": "Workspace update details"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteWorkspace",
				"responses": {
					"200": {
						"description": "Workspace deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_void_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Delete workspace",
				"summary": "Delete workspace",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/workspaces/{workspaceId}/members": {
			"post": {
				"operationId": "AddMembers",
				"responses": {
					"200": {
						"description": "Members added successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace or users not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Add members to workspace",
				"summary": "Add workspace members",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User IDs to add",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AddWorkspaceMemberDto",
								"description": "User IDs to add"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "RemoveMember",
				"responses": {
					"200": {
						"description": "Member removed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_WorkspaceResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Remove member from workspace",
				"summary": "Remove workspace member",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User ID to remove",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RemoveWorkspaceMemberDto",
								"description": "User ID to remove"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetWorkspaceMembers",
				"responses": {
					"200": {
						"description": "Members retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse__id-string--name-string--email-string--role-string_-Array_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get workspace members",
				"summary": "Get workspace members",
				"tags": [
					"Workspaces"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Workspace ID",
						"in": "path",
						"name": "workspaceId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/events": {
			"post": {
				"operationId": "CreateEvent",
				"responses": {
					"201": {
						"description": "Event created successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Workspace not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Create a new event",
				"summary": "Create an event",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Event creation details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateEventDto",
								"description": "Event creation details"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetEvents",
				"responses": {
					"200": {
						"description": "Events retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse-Array_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get events with optional filters",
				"summary": "Get events",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Filter by workspace ID",
						"in": "query",
						"name": "workspaceId",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter events starting from this date",
						"in": "query",
						"name": "startDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter events ending before this date",
						"in": "query",
						"name": "endDate",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by event status",
						"in": "query",
						"name": "status",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Filter by assignee user ID",
						"in": "query",
						"name": "assigneeId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/events/{eventId}": {
			"get": {
				"operationId": "GetEventById",
				"responses": {
					"200": {
						"description": "Event retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Event not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get event by ID",
				"summary": "Get event details",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Event ID",
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateEvent",
				"responses": {
					"200": {
						"description": "Event updated successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Access denied",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Event not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Update event",
				"summary": "Update event",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Event ID",
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Event update details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateEventDto",
								"description": "Event update details"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteEvent",
				"responses": {
					"200": {
						"description": "Event deleted successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_void_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Access denied",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Event not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Delete event",
				"summary": "Delete event",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Event ID",
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/events/{eventId}/assignees": {
			"post": {
				"operationId": "AssignUsers",
				"responses": {
					"200": {
						"description": "Users assigned successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Access denied",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Event or users not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Assign users to event",
				"summary": "Assign users to event",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Event ID",
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User IDs to assign",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/AssignEventDto",
								"description": "User IDs to assign"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "UnassignUser",
				"responses": {
					"200": {
						"description": "User unassigned successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_EventResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"403": {
						"description": "Access denied",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "Event not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Unassign user from event",
				"summary": "Unassign user from event",
				"tags": [
					"Events"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": [
					{
						"description": "Event ID",
						"in": "path",
						"name": "eventId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "User ID to unassign",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UnassignEventDto",
								"description": "User ID to unassign"
							}
						}
					}
				}
			}
		},
		"/api/chat/message": {
			"post": {
				"operationId": "ProcessMessage",
				"responses": {
					"200": {
						"description": "Message processed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_ChatResponseDto_"
								}
							}
						}
					}
				},
				"description": "Process a chat message through the AI agent",
				"summary": "Process chat message",
				"tags": [
					"Chat"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ProcessMessageDto"
							},
							"example": {
								"userName": "John Doe",
								"messages": [
									"Create a task for tomorrow: Review pull requests"
								],
								"blocked": false
							}
						}
					}
				}
			}
		},
		"/api/auth/register": {
			"post": {
				"operationId": "Register",
				"responses": {
					"201": {
						"description": "User registered successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_AuthResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"409": {
						"description": "User already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Register a new user account",
				"summary": "Register a new user",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "User registration details",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegisterDto",
								"description": "User registration details"
							}
						}
					}
				}
			}
		},
		"/api/auth/login": {
			"post": {
				"operationId": "Login",
				"responses": {
					"200": {
						"description": "Login successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_AuthResponse_"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid credentials",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Login with email and password",
				"summary": "User login",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "User login credentials",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginDto",
								"description": "User login credentials"
							}
						}
					}
				}
			}
		},
		"/api/auth/refresh": {
			"post": {
				"operationId": "RefreshToken",
				"responses": {
					"200": {
						"description": "Token refreshed successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse__accessToken-string__"
								}
							}
						}
					},
					"400": {
						"description": "Validation Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"401": {
						"description": "Invalid refresh token",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Refresh access token using refresh token",
				"summary": "Refresh access token",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "Refresh token",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RefreshTokenDto",
								"description": "Refresh token"
							}
						}
					}
				}
			}
		},
		"/api/auth/me": {
			"get": {
				"operationId": "GetMe",
				"responses": {
					"200": {
						"description": "User retrieved successfully",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ApiResponse_UserResponse_"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"404": {
						"description": "User not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					},
					"500": {
						"description": "Internal Server Error",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ErrorResponse"
								}
							}
						}
					}
				},
				"description": "Get current authenticated user information",
				"summary": "Get current user",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwt": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	],
	"tags": [
		{
			"name": "Authentication",
			"description": "User authentication and authorization endpoints"
		}
	]
}